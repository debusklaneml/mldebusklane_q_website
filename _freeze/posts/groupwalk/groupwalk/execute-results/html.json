{
  "hash": "a475b7eeda3848d68ccd913bb9e22e60",
  "result": {
    "markdown": "---\ntitle: group_walk\ndate: '2020-02-25'\n\ncategories: \n  - Code\n  - R\n\noutput: \n  html_document:\n    theme: journal\n    highlight: zenburn\n---\n\n\n\n\nI ran across this little gem at work today trying to build a function to easily iterate out a series of excel files (`.xlsx`) that needed to be generated from an identifier column in a larger dataset. Lets take a look.\n\n\n::: {.cell hash='groupwalk_cache/html/unnamed-chunk-1_7bd8a34f816d4e285982c1afb55a62be'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(writexl)\n```\n:::\n\n\nLet's grab some data!!!\n\n\n::: {.cell hash='groupwalk_cache/html/unnamed-chunk-2_610455ebaaeda78e520163d9ce056a2d'}\n\n```{.r .cell-code}\ndata(iris)\n```\n:::\n\n\nLet's take a look.\n\n\n::: {.cell hash='groupwalk_cache/html/unnamed-chunk-3_557508e2e47b5ac8193356255f61fec5'}\n\n```{.r .cell-code}\niris %>%\n  skimr::skim()\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |150        |\n|Number of columns        |5          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|factor                   |1          |\n|numeric                  |4          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                |\n|:-------------|---------:|-------------:|:-------|--------:|:-------------------------|\n|Species       |         0|             1|FALSE   |        3|set: 50, ver: 50, vir: 50 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate| mean|   sd|  p0| p25|  p50| p75| p100|hist  |\n|:-------------|---------:|-------------:|----:|----:|---:|---:|----:|---:|----:|:-----|\n|Sepal.Length  |         0|             1| 5.84| 0.83| 4.3| 5.1| 5.80| 6.4|  7.9|▆▇▇▅▂ |\n|Sepal.Width   |         0|             1| 3.06| 0.44| 2.0| 2.8| 3.00| 3.3|  4.4|▁▆▇▂▁ |\n|Petal.Length  |         0|             1| 3.76| 1.77| 1.0| 1.6| 4.35| 5.1|  6.9|▇▁▆▇▂ |\n|Petal.Width   |         0|             1| 1.20| 0.76| 0.1| 0.3| 1.30| 1.8|  2.5|▇▁▇▅▃ |\n:::\n:::\n\n\nYou'll notice that aside from the 4 numeric species attributes (Sepal & Petal length and width), there is an identification/classification variable (actually a factor variable) that denotes which `Species` each flower is.\n\nFor this demonstration, I'd like to create three seperate '.xlsx' files simply based on this identification. What would be helpful, in the end, is to have each file named after this identification.\n\nThankfully, the `{dplyr}` package has made this super simple.\n\n\n::: {.cell hash='groupwalk_cache/html/unnamed-chunk-4_252c38bb64fa45f6608e2a1e7d14023e'}\n\n```{.r .cell-code}\niris %>%\n  group_by(Species) %>% # Group by the variable for which you wish to iterate over to create individual files from.\n  group_walk(~ write_xlsx(.x, paste0(\"iris_\", .y$Species, \".xlsx\")), keep = TRUE)\n```\n:::\n\n\n# group_by\n\nTo walk through this a bit, you'll notice a simple `group_by` function that serves to identify which column we wish to not only group our data by, but the one which we'd like to iterate over to make individual files from.\n\n# group_walk (group_map)\n\nNext, the `group_walk` function, which is an extension of the `group_map` series (more info [here](https://dplyr.tidyverse.org/reference/group_map.html)) that mimics many `purrr` functions, except through a series of groups... not just a list, df columsn, or some type of nest.\n\nIdentical to the other `walk` functions that are used for their 'side effects' (think output, not what it returns... ), the `group_walk` function silently returns the `.x` argument. We're interested in what it does, not the data it may produce. Afterall, I just want the output of the function. I plan to dive into this in a future `map` post in the future... it can be confusing. Nicely, the `group_walk` function also includes an option to keep the grouping variable through the `keep =` option that retains the variable in each `.x`.\n\nTo wrap this up, the `paste0` function serves to meet the second argument requirement for `write_xlsx`. If you're not familiar with paste0/paste, it simply combindes all arguments together. In this case, it is simply taking the string prefix \"iris\\_,\" each `Species`, and \".xlsx\" and concatenates them.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}